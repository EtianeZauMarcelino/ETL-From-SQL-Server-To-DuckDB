{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to documentations from my project:","text":""},{"location":"#extract-from-sql-server-and-load-to-duckdb","title":"Extract from SQL Server and Load to DuckDB","text":""},{"location":"#diagramas","title":"Diagramas","text":"<pre><code>graph LR\n    hello --&gt; world\n\n</code></pre>"},{"location":"#reference","title":"Reference","text":""},{"location":"#etl","title":"ETL","text":""},{"location":"#extract-function","title":"Extract Function","text":"<p>Extracts data from a SQL Server database using the provided query and returns it as a pandas DataFrame.</p> <p>Parameters: - query (str): SQL query to extract data from the SQL Server database.</p> <p>Returns: - pd.DataFrame: DataFrame containing the extracted data.</p> <p>Raises: - Exception: If there's an error during the extraction process.</p> <p>Example:</p> <pre><code>data = extract_from_sql_server(\"SELECT * FROM TableName\")\n</code></pre> Source code in <code>app\\etl.py</code> <pre><code>def extract_from_sql_server(query: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Extracts data from a SQL Server database using the provided query and returns it as a pandas DataFrame.\n\n    Parameters:\n    - query (str): SQL query to extract data from the SQL Server database.\n\n    Returns:\n    - pd.DataFrame: DataFrame containing the extracted data.\n\n    Raises:\n    - Exception: If there's an error during the extraction process.\n\n    Example:\n    ```\n    data = extract_from_sql_server(\"SELECT * FROM TableName\")\n    ```\n    \"\"\"\n    config = configuracoes()\n\n    try:\n        sql_server_Connection = pyodbc.connect(\n            f\"\"\"DRIVER={'SQL Server'};\n                SERVER={config['db_server']};\n                DATABASE={config['db_name']};\n                UID={config['db_user']};\n                PWD={config['db_pass']};\"\"\"\n        )\n\n        sql_server_cursor = sql_server_Connection.cursor()\n        print(\"SQLSERVER01 Server Connected\")\n\n        df_AdventureWorks = pd.read_sql(query, sql_server_Connection)\n\n        schema_AdventureWorks = pa.infer_schema(df_AdventureWorks)\n\n        with open(f'schema\\schema_AdventureWorks.py', 'w', encoding='utf-8') as schema_Adventure_Works:\n            schema_Adventure_Works.write(schema_AdventureWorks.to_script())\n\n    except Exception as error:\n        sql_server_Connection.close()\n        print(\"SQLSERVER01 Disconnected because of an error\")\n\n        print(f\"Error message: {error}\")\n\n    finally:\n        sql_server_Connection.close()\n\n    return df_AdventureWorks\n</code></pre> <p>L\u00ea dados de uma tabela DuckDB e imprime os resultados.</p> <p>Par\u00e2metros: - table_name: Nome da tabela de onde os dados ser\u00e3o lidos. - db_file: Caminho para o arquivo DuckDB.</p> Source code in <code>app\\extract_validation.py</code> <pre><code>def read_from_duckdb_and_show(table_name: str, db_file: str = 'From_SQL_Server.db'):\n    \"\"\"\n    L\u00ea dados de uma tabela DuckDB e imprime os resultados.\n\n    Par\u00e2metros:\n    - table_name: Nome da tabela de onde os dados ser\u00e3o lidos.\n    - db_file: Caminho para o arquivo DuckDB.\n    \"\"\"\n    # Conectar ao DuckDB\n    con = duckdb.connect(database=db_file)\n\n    # Executar consulta SQL\n    con.sql(f\"\"\"\n        SELECT * FROM {table_name} limit 10\n        \"\"\").show()\n\n    # Fechar a conex\u00e3o\n    con.close()\n</code></pre>"}]}